// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc369.Robot2017Code;


import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.awt.Image;

import org.usfirst.frc369.Robot2017Code.commands.*;
import org.usfirst.frc369.Robot2017Code.subsystems.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	String Juan;
	int currSession;
	int sessionfront;
	int sessionback;
	Image frame;
    Command autonomousCommand;
    CommandGroup autoDrive;
    SendableChooser autoChooser;
//    public static Cameras cameras;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static RobotHanger robotHanger;
    public static DriveSystem driveSys;
    public static driveByJoy drive;
    public static Compressor compressor;
    public static DoubleEncoder dblE;
    public static GearHandler gearHandler;
    public static Joystick joy;
    public static GyroAngleHandler gyroAngle;
    public static LED LEDSys;
 //   public static Server Raspi;
    public static ImageProcessing vision;
    
 //   public static LimitGrab lim;
    

    
    
    
    
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	robotHanger = new RobotHanger(); 					//initialize new subsystem robothanger
        driveSys = new DriveSystem();						//initialize new subsystem DriveSystem
        gearHandler = new GearHandler();					//initialize new subsystem RobotHanger
        vision = new ImageProcessing();
        compressor = new Compressor();						//initialize new Compressor				
        compressor.setClosedLoopControl(true);				//start compressor cycle
        LEDSys = new LED();
//        Raspi = new Server();
        
        dblE = new DoubleEncoder();							//initialize new subsystem DoubleEncoders
        joy = new Joystick(2);								//joystick for testing mode

        oi = new OI();										//initialize new OI class variable "operator input"
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Straight Peg auto", new PlaceGearAutonomous());
        autoChooser.addObject("Left Peg auto", new PlaceGearOnLeftPeg_Auto());
        autoChooser.addObject("Right Peg auto", new PlaceGearOnRightPeg_Auto());
        autoChooser.addObject("Just drive straight", new DriveStraight_Auto());
        SmartDashboard.putData("Auto chooser", autoChooser);
        
    }
    
    public void robotPeriodic() {
    	Scheduler.getInstance().run();
        SmartDashboard.putNumber("GYRO", RobotMap.gyro.getAngle());
        SmartDashboard.putNumber("left encoder dist", RobotMap.leftEncoder.getDistance());
        SmartDashboard.putNumber("right encoder dist", RobotMap.rightEncoder.getDistance());
        SmartDashboard.putNumber("left encoder get", RobotMap.leftEncoder.get());
        SmartDashboard.putNumber("right encoder get", RobotMap.rightEncoder.get());
        SmartDashboard.putNumber("server",Robot.vision.getangle());
        // SmartDashboard.putString("", Juan);
    }


    public void disabledInit(){
    	
    }

    public void disabledPeriodic() {
        
    }

    public void autonomousInit() {
    	driveSys.resetAngle();
    	
    	
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
//    	if (autonomousCommand != null) autonomousCommand.start();
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
        drive = new driveByJoy();
        drive.start();
//        lim = new LimitGrab();
//        lim.start();
    }


    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    	driveSys.resetAngle();
    	dblE.reset();
    	//RobotMap.LimitSwitch.LimitGrab();
    	
    }
    
    public void testInit() {
    	RobotMap.leftEncoder.reset();
    	RobotMap.rightEncoder.reset();
    	driveSys.resetAngle();
    	new RotateToAngle(90).start();
    }
    
    public void testPeriodic() {
  //      Scheduler.getInstance().run();
        LiveWindow.run();
        //THIS COMMAND WILL UPDATE THE VALUES OF PID ACCCORDING TO THE VALUES OF THE FIRST THREE
        //SLIDERS IN THE BASIC TAB ON THE DASHBOARD. START OFF WITH P:0.03/I:0.0/D:0.0
        //AND USE TEST ANGLE OF 90 DEGREES AND 0 DEGREES
        //IF THE ROBOT GOES PAST THE THE ANGLE TO ACQUIRE THEN DECREASE P e.g. 0.029, 0.028 etc
        //AND VICE VERSA FOR IF IT SLOWS DOWN BEFORE IT HITS ITS TARGET ANGLE e.g.: 0.031 
        //driveSys.modPID(); 
        //driveSys.rotateToAngle(90);
        if(SmartDashboard.getBoolean("DB/Button 0", false)){
        	
        }
        if(joy.getRawButton(1))
        	RobotMap.leftEncoder.reset();
        SmartDashboard.putNumber("LEFT ENCODER", RobotMap.leftEncoder.getDistance());
        //SmartDashboard.putNumber("left encoder dist", RobotMap.leftEncoder.getDistance());
        //SmartDashboard.putNumber("right encoder dist", RobotMap.rightEncoder.getDistance());
    }
}